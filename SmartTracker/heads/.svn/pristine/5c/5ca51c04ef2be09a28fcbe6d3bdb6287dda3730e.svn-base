package no.tellu.tracker.heads.sensor;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.thingml.chestbelt.android.chestbeltdroid.communication.ChestBeltBufferizer;
import org.thingml.chestbelt.android.chestbeltdroid.preferences.PreferencesActivity;
import org.thingml.chestbelt.driver.ChestBeltListener;

import android.content.Intent;
import android.os.Handler;
import android.os.Looper;
import android.util.Base64;
import no.tellu.android.app.Message;
import no.tellu.android.app.ModuleController;
import no.tellu.android.app.ModuleDef;
import no.tellu.android.app.stat.StatGroup;
import no.tellu.android.app.system.TelluApp;
import no.tellu.tracker.ObservationProvider;
import no.tellu.tracker.TrackerControl;
import no.tellu.tracker.TrackerEvent;

public class SensorComController extends ModuleController implements ObservationProvider, ChestBeltListener {
	public static final String MODULE_ID = "HeadsSensorCom";
	public static final String CAT_CHEST_UNIT = "chestUnit";
	public static final int  ID_START_PREFERENCES = 1;
	
	private static final class SensorNames {
		public static final String BATTERY_STATUS = "_Battery"; 
		public static final String HEART_RATE = "_Heartrate";
		public static final String SKIN_TEMPERATURE = "_Temperature";
		public static final String ACTIVITY = "_Activity";
		public static final String POSITION = "_Position";
		public static final String ECGDATA = "_ECGData";
		public static final String GYROPITCH = "_GyroPitch";
		public static final String GYROROLL = "_GyroRoll";
		public static final String GYROYAW = "_GyroYaw";
		public static final String ACCLATERAL = "_AccLateral";
		public static final String ACCLONGITUDINAL = "_AccLongitudinal";
		public static final String ACCVERTICAL = "_AccVertical";
	}
	
	private ChestBeltBufferizer bufECG = new ChestBeltBufferizer(System.currentTimeMillis(), 4000);
	private ChestBeltBufferizer bufAccLateral = new ChestBeltBufferizer(System.currentTimeMillis(), 4000);
	private ChestBeltBufferizer bufAccLongitudinal = new ChestBeltBufferizer(System.currentTimeMillis(), 4000);
	private ChestBeltBufferizer bufAccVertical = new ChestBeltBufferizer(System.currentTimeMillis(), 4000);
	private ChestBeltBufferizer bufGyroPitch = new ChestBeltBufferizer(System.currentTimeMillis(), 4000);
	private ChestBeltBufferizer bufGyroRoll = new ChestBeltBufferizer(System.currentTimeMillis(), 4000);
	private ChestBeltBufferizer bufGyroYaw = new ChestBeltBufferizer(System.currentTimeMillis(), 4000);
	
	private boolean storage = true;
	private boolean ecgStorage = true;
	private boolean imuStorage = false;
	private boolean tracking = false;
	
	public static ModuleDef defineModule() {
		ModuleDef def = new ModuleDef(MODULE_ID, SensorComController.class);
		return def;
	}
	
	private TrackerControl receiver;
	

	public SensorComController(TelluApp app, ModuleDef def) {
		super(app, def);
	}

	@Override
	public void onStart() {
	
	}
	
	@Override
	public void onExit() {
		//Module will be destroyed - cleanup?
		receiver = null;
	}

	@Override
	public int getActivityLevel() {
		return ACTIVITY_LEVEL_HIGH;
	}

	@Override
	public void setReceiver(TrackerControl tc) {
		receiver = tc;
	}

	@Override
	public void startObserving() {
		this.tracking = true;
	}

	@Override
	public void stopObserving() {
		this.tracking = false;
		
	}

	@Override
	public void getStatGroups(List<StatGroup> list) {
		// TODO: Provide values for debug view?
	}
	
	@Override
	public void onMessage(Message mes) {
		if(mes.getId() == ID_START_PREFERENCES){
			Intent intent = new Intent(getApp(), PreferencesActivity.class);
			intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			getApp().startActivity(intent);
		}
	}

	@Override
	public void accLateral(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void accLongitudinal(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void accVertical(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void batteryStatus(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void cUFWRevision(String arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void cUSerialNumber(long arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void combinedIMU(int arg0, int arg1, int arg2, int arg3, int arg4,
			int arg5, int arg6) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void connectionLost() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void eCGData(final int value) {
		if (storage && ecgStorage) {
			bufECG.addMeasure(value, System.currentTimeMillis());
			if (bufECG.isReady()) {
				final String data = bufECG.toString();
				bufECG.reset(System.currentTimeMillis(), 4000);
				Runnable r = new Runnable() {
					@Override
					public void run() {
						sendECG(data);
					}
				};
				Handler h = new Handler(Looper.getMainLooper());
				h.post(r);
			}
		}
	}

	private void sendECG(String data) {
		log.info("Length: " + data.length());
		
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ZipOutputStream zos = new ZipOutputStream(baos);
		ZipEntry ze = new ZipEntry("ECG");
		String base64 = null;
		try {
			zos.putNextEntry(ze);
			zos.write(data.toString().getBytes());
			zos.closeEntry();
			zos.close();
			baos.close();
			
			base64 = Base64.encodeToString(baos.toByteArray(), Base64.NO_WRAP);
			
			log.info("Length Base64: " + base64.length());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		/*String base64 = Base64.encodeToString(data.getBytes(), Base64.NO_WRAP);
		log.info("Length base64: " + base64.length());*/
		
		if(tracking){
			TrackerEvent te = new TrackerEvent();
			te.setTimestamp(System.currentTimeMillis());
			te.setProperty("timeseries.ecg", base64);
			te.setType(TrackerEvent.EVENT_CUSTOM);
			te.setSendStatus(TrackerEvent.SEND_TODO);
			receiver.addObservation(te);
		}
	}
	

	@Override
	public void eCGRaw(final int value, int timestamp) {
		if (storage && ecgStorage) {
			bufECG.addMeasure(value, System.currentTimeMillis());
			if (bufECG.isReady()) {
				final String data = bufECG.toString();
				bufECG.reset(System.currentTimeMillis(), 4000);
				Runnable r = new Runnable() {
					@Override
					public void run() {
						sendECG(data);
					}
				};
				Handler h = new Handler(Looper.getMainLooper());
				h.post(r);
			}
		}
	}

	@Override
	public void eCGSignalQuality(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fullClockTimeSync(long arg0, boolean arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void gyroPitch(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void gyroRoll(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void gyroYaw(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void heartRate(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void heartRateConfidence(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void indication(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void messageOverrun(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void rawActivityLevel(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void referenceClockTime(long arg0, boolean arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void skinTemperature(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void status(int arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}
}
